// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FunctionKernel


struct ParticleData
{
    float4 position;
};

RWStructuredBuffer<ParticleData> _Positions;

uint _Resolution;
float _Time;
float _Step;

float2 GetUV(uint3 id)
{
    float2 uv;
    //_Step:2f/_Resolution
    uv.x = (id.x) * _Step * 10 ;
    uv.y = (id.y) * _Step * 10;
    //这里的作用是将id[0-DispatchIndex]映射到(-1,1)
    //所以映射到(-1,1)之后每个点的距离为2/_Resolution即_Step的大小
    return uv;
}

[numthreads(8, 8, 1)]
void FunctionKernel(uint3 id : SV_DispatchThreadID)
{
    ParticleData m_ParticleData = (ParticleData)0;
    
    //_Resolution=8*ThreadGroups[Dispatch了多少个线程组]=groupSizeX
    uint DispatchIndex = id.x + (id.y * _Resolution);
    float2 uv = GetUV(id);

    // simple version
    // float3 basicPosition = float3(DispatchIndex, 0, 0);
    // m_ParticleData.position = float4(basicPosition, 1.0);

    // complex version
    float3 basicPosition = float3(id.x * 1.5, id.x * 0.1 + sin(id.x + _Time), id.y * 1.5);
    m_ParticleData.position = float4(basicPosition, 1.0);

    _Positions[DispatchIndex] = m_ParticleData;
}
